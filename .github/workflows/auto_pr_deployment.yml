name: PR Deployment to EC2

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ec2-user
  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.set-vars.outputs.pr_number }}
      backend_port: ${{ steps.set-vars.outputs.backend_port }}
      frontend_port: ${{ steps.set-vars.outputs.frontend_port }}
    steps:
      - name: Set variables
        id: set-vars
        run: |
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "backend_port=$((8000 + ${{ github.event.pull_request.number }}))" >> $GITHUB_OUTPUT
          echo "frontend_port=$((5173 + ${{ github.event.pull_request.number }}))" >> $GITHUB_OUTPUT

  deploy_or_update:
    needs: setup
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/ec2.key
          chmod 600 ~/.ssh/ec2.key
          ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy or Update Container
        env:
          PR_NUMBER: ${{ needs.setup.outputs.pr_number }}
          GITHUB_SHA: ${{ github.sha }}
          BACKEND_PORT: ${{ needs.setup.outputs.backend_port }}
          FRONTEND_PORT: ${{ needs.setup.outputs.frontend_port }}
        run: |
          scp -i ~/.ssh/ec2.key -r ./* ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }}:~/pr-${PR_NUMBER}
          ssh -i ~/.ssh/ec2.key ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }} << EOF
            set -e
            cd ~/pr-${PR_NUMBER}
            echo "PR_NUMBER=${PR_NUMBER}" > .env
            echo "GITHUB_SHA=${GITHUB_SHA}" >> .env
            echo "BACKEND_PORT=${BACKEND_PORT}" >> .env
            echo "FRONTEND_PORT=${FRONTEND_PORT}" >> .env
            echo "EC2_HOST=${{ env.EC2_HOST }}" >> .env
            
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d
            
            docker image prune -af
          EOF

  cleanup:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/ec2.key
          chmod 600 ~/.ssh/ec2.key
          ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Cleanup Container and Resources
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          ssh -i ~/.ssh/ec2.key ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }} << EOF
            cd ~/pr-${PR_NUMBER}
            docker-compose down -v --rmi all
            cd ~
            rm -rf pr-${PR_NUMBER}
            docker network rm pr${PR_NUMBER}_network || true
            docker volume rm pr${PR_NUMBER}_postgres_data || true
            docker system prune -af --volumes
          EOF

  comment_pr:
    needs: [setup, deploy_or_update]
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const prNumber = '${{ needs.setup.outputs.pr_number }}';
            const backendPort = '${{ needs.setup.outputs.backend_port }}';
            const frontendPort = '${{ needs.setup.outputs.frontend_port }}';
            const backendUrl = `http://${process.env.EC2_HOST}:${backendPort}`;
            const frontendUrl = `http://${process.env.EC2_HOST}:${frontendPort}`;
            const body = `Deployment for PR #${prNumber} is live!
            Backend URL: ${backendUrl}
            Frontend URL: ${frontendUrl}
            Commit: ${{ github.sha }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
