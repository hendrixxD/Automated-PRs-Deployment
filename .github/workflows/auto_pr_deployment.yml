name: PR Deployment to EC2

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ec2-user
  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/ec2.key
          chmod 600 ~/.ssh/ec2.key
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      - name: Deploy or Update Container
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_SHA: ${{ github.sha }}
          BACKEND_PORT: ${{ 8000 + github.event.pull_request.number }}
          FRONTEND_PORT: ${{ 5173 + github.event.pull_request.number }}
        run: |
          scp -i ~/.ssh/ec2.key -r ./* ${EC2_USERNAME}@${EC2_HOST}:~/pr-${PR_NUMBER}
          ssh -i ~/.ssh/ec2.key ${EC2_USERNAME}@${EC2_HOST} << EOF
            set -e
            cd ~/pr-${PR_NUMBER}
            echo "PR_NUMBER=${PR_NUMBER}" > .env
            echo "GITHUB_SHA=${GITHUB_SHA}" >> .env
            echo "BACKEND_PORT=${BACKEND_PORT}" >> .env
            echo "FRONTEND_PORT=${FRONTEND_PORT}" >> .env
            echo "EC2_HOST=${EC2_HOST}" >> .env
            
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d
            
            docker image prune -af
          EOF

      - name: Comment on PR
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const prNumber = '${{ github.event.pull_request.number }}';
            const backendPort = 8000 + parseInt(prNumber);
            const frontendPort = 5173 + parseInt(prNumber);
            const backendUrl = `http://${process.env.EC2_HOST}:${backendPort}`;
            const frontendUrl = `http://${process.env.EC2_HOST}:${frontendPort}`;
            const body = `Deployment for PR #${prNumber} is live!
            Backend URL: ${backendUrl}
            Frontend URL: ${frontendUrl}
            Commit: ${{ github.sha }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

  cleanup:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/ec2.key
          chmod 600 ~/.ssh/ec2.key
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      - name: Cleanup Container and Resources
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          ssh -i ~/.ssh/ec2.key ${EC2_USERNAME}@${EC2_HOST} << EOF
            cd ~/pr-${PR_NUMBER}
            docker-compose down -v --rmi all
            cd ~
            rm -rf pr-${PR_NUMBER}
            docker network rm pr${PR_NUMBER}_network || true
            docker volume rm pr${PR_NUMBER}_postgres_data || true
            docker system prune -af --volumes
          EOF
        continue-on-error: true
        id: deploy
        
      - name: Check Deployment Status
        if: steps.deploy.outcome == 'failure'
        run: |
          echo "Deployment failed. Check the logs for more information."
          exit 1  

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const prNumber = '${{ github.event.pull_request.number }}';
            const body = `PR #${prNumber} environment has been cleaned up. All associated containers, images, volumes, and networks have been removed.`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
